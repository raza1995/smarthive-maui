import moment from "moment";
import { updateOrCreatePatchingInformation } from "../assetPatchingInformation.service";
import malwareBytesEndpointModel from "../../../mongo/malwareBytes/Endpoints/endpoints.model";
import malwareBytesEndpointAssetsModel from "../../../mongo/malwareBytes/EndpointAssets/endpointAssets.model";
import malwareBytesEndpointAgentInfoModel from "../../../mongo/malwareBytes/EndpointAgentInfo/endpointAgentinfo.model";

const saveAssetPatchingInfoFromMalwareBytes = async (asset, source) => {
    const malwareByteDevice = await malwareBytesEndpointModel.findOne({
      link: source.device_id,
      company_id: asset.company_id,
    });
    const malwareByteEndPointAsset = await malwareBytesEndpointAssetsModel.findOne({
        id: source.device_id,
        company_id: asset.company_id,
    })
    const link = source.device_id.split("/");
    const deviceId = link[link.length - 1];
    const agentInfo = await malwareBytesEndpointAgentInfoModel.findOne({
        asset_id: deviceId,
        company_id:asset.company_id,
    });

    const data = {
      asset_id: asset.id,
      company_id: asset.company_id,
      integration_id: source.integration_id,
      display_name: malwareByteDevice.display_name,
    //   connected: malwareByteDevice.connected,
    //   compliant: malwareByteDevice.compliant,
    //   exception: malwareByteDevice.exception,
    //   is_compatible: malwareByteDevice.is_compatible,
      serial_number: malwareByteDevice?.agent?.serial_number,
      os_family: malwareByteDevice?.agent?.os_info?.os_platform,
      os_name: malwareByteDevice?.agent?.os_info?.os_release_name,
      os_version: malwareByteDevice?.agent?.os_info?.os_version,
      // status: malwareByteDevice.status,
    //   group: assetServerGroup?.name,
    //   cpu: malwareByteDevice?.detail?.CPU,
      ram: malwareByteEndPointAsset?.memory?.total_virtual,
    //   vender: malwareByteDevice?.detail?.VENDOR,
      volume: malwareByteEndPointAsset?.drives[0]?.total_size,
    //   server_group_id: malwareByteDevice?.server_group_id,
      last_scan_time: malwareByteDevice?.machine?.last_scanned_at,
      last_logged_in_user: malwareByteDevice?.agent?.last_user,
      last_seen: agentInfo?.last_seen_at,
    //   next_patch_window: malwareByteDevice?.next_patch_time,
      device_require_reboot: malwareByteDevice?.status?.reboot_required?.status,
    //   device_status: malwareByteDevice.status?.device_status,
    //   agent_status: malwareByteDevice.status?.agent_status,
    //   policy_status: malwareByteDevice.status?.policy_status,
    //   model: malwareByteDevice?.detail?.MODEL,
      number_of_patch_available: malwareByteEndPointAsset.updates_available.length || 0,
      patching_available_from: 0,
      all_patch_installed: true,
    };

    if(malwareByteEndPointAsset.updates_available.length > 0) {
        const criticalSoftWareUpdate = malwareByteEndPointAsset?.updates_available.filter((item) => item.severity === "important");
        let patchAvailableDate = '';
        if(criticalSoftWareUpdate.length > 0) {
            patchAvailableDate = new Date(criticalSoftWareUpdate[0].date * 1000);            
            data.patch_severity = criticalSoftWareUpdate[0]?.severity;
        } else {
            patchAvailableDate = new Date(malwareByteEndPointAsset.updates_available[0].date * 1000);
            data.patch_severity = malwareByteEndPointAsset[0]?.severity;
        }
        data.patching_available_from = moment(patchAvailableDate).format();        
        data.all_patch_installed = false;    
    }
    
    if (data.all_patch_installed) {
      data.risk_score = 850;
    } else if (data.number_of_patch_available > 0) {
      const currentDate = moment();
      const patching_available_from = moment(data.patching_available_from);
      const timeDiff = currentDate.diff(patching_available_from, "days");
      console.log("timeDiff", timeDiff);
      if (timeDiff >= 3) {
        data.risk_score = 0;
      } else if (timeDiff >= 2) {
        data.risk_score = 585;
      } else if (timeDiff < 2) {
        data.risk_score = 675;
      }
    } else {
      data.risk_score = 0;
    }
    console.log('data.risk_score---------------------------', data.risk_score)
    const resp = updateOrCreatePatchingInformation(data);
    return resp;
  };

  export default saveAssetPatchingInfoFromMalwareBytes