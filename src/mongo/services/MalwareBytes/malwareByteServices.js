import base64 from "base-64";
import axios from "axios";
import malwareBytesApi from "../../../api/malwareBytes";
import IntegrationBaseUrlsModel from "../../../Mysql/IntegrationBaseUrls/IntegrationBaseUrls.model";
import { integrationsNames } from "../../../utils/constants";

export const getMalwareBytesAccessToken = async (
  client_id,
  client_secret,
  baseURL,
  scope = "read"
) => {
  const params = new URLSearchParams();
  const clientId = `mwb-cloud-${client_id}`;
  // params.append('Authorization', `Basic base64(mwb-cloud-${client_id}:${client_secret})`);
  params.append("scope", scope);
  params.append("grant_type", "client_credentials");
  const tokenURl = "/oauth2/token";
  const resp = await axios
    .post(`${baseURL}${tokenURl}`, params, {
      headers: {
        Authorization: `Basic ${base64.encode(`${clientId}:${client_secret}`)}`,
      },
    })
    .then((result) => result)
    .catch((err) => err.response);
  return resp;
};

export const findMalwareBytesBaseUrlAndGetAccessToken = async (
  client_id,
  client_secret
) => {
  let resp = {
    valid: false,
  };
  const baseUrls = await IntegrationBaseUrlsModel.findAll({
    where: {
      integration_name: integrationsNames.MALWAREBYTES,
    },
  });

  for await (const url of baseUrls) {
    const result = await getMalwareBytesAccessToken(
      client_id,
      client_secret,
      url.base_url
    );
    if (result.status === 200 || result.status === 201) {
      resp = {
        valid: true,
        status: result.status,
        data: {
          urlId: url.id,
          baseURL: url.base_url,
          access_token: result.data.access_token,
        },
      };
      break;
    }
  }
  return resp;
};
