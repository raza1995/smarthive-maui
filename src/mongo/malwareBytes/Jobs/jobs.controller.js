import { integrationsNames } from "../../../utils/constants";
import { getMalwareBytesAccessToken } from "../../services/MalwareBytes/malwareByteServices";
import { getAllCompaniesHaveIntegration } from "../../../Mysql/Companies/company.service";
import { CliProgressBar } from "../../../utils/cliProgressBar";
import { getMalwareBytesJobsApi } from "../../../api/malwareBytes";
import malwareBytesJobsModel from "./jobs.model";
import { errorHandler } from "../../../utils/errorHandler";

const updateOrCreate = async (items, company_id) => {
  try {
    console.log("Number of items ", items.length);
    let i = 0;
    for await (const item of items) {
      console.log(item);
      await malwareBytesJobsModel.updateOne(
        { id: item.id, company_id },
        { company_id, ...item },
        {
          upsert: true,
        }
      );
      CliProgressBar(
        `MalwareBytes Jobss for company Id ${company_id}`,
        i,
        items.length
      );
      i++;
    }
    console.log("done...");
    return true;
  } catch (err) {
    errorHandler(err);
    return false;
  }
};

const fetchAndSaveJobsData = (
  baseURL,
  token,
  account_id,
  company_id,
  next_cursor
) =>
  new Promise((resolve) => {
    getMalwareBytesJobsApi(baseURL, token, account_id, next_cursor)
      .catch((error) => resolve(error))
      .then(async (response) => {
        if (response?.data?.jobs?.length > 0) {
          try {
            await updateOrCreate(response?.data?.jobs, company_id);
            resolve(response.data);
          } catch (err) {
            resolve(err);
          }
        } else {
          resolve("No data");
        }
      });
  });

export const getMalwareBytesJobs = async (req, res) => {
  try {
    const Companies = await getAllCompaniesHaveIntegration(
      integrationsNames.MALWAREBYTES
    );
    if (Companies.length > 0) {
      if (res) {
        res.send("MalwareBytes Jobs data start fetching successfully");
      }
      for await (const company of Companies) {
        const malwareByteIntegration = company.integrations.integration_values;
        const baseURL = company.integrations?.integrations_base_url?.base_url;
        if (malwareByteIntegration?.client_secret) {
          let next_cursor = null;
          do {
            const client_secret = malwareByteIntegration?.client_secret;
            const client_id = malwareByteIntegration?.client_id;
            const account_id = malwareByteIntegration?.account_id;
            const AccessData = await getMalwareBytesAccessToken(
              client_id,
              client_secret,
              baseURL
            );
            if (AccessData.status === 200) {
              const resp = await fetchAndSaveJobsData(
                baseURL,
                AccessData.data.access_token,
                account_id,
                company.id,
                next_cursor
              );
              console.log("total_count", resp?.total_count);
              if (resp?.next_cursor) {
                next_cursor = resp?.next_cursor;
              } else {
                next_cursor = null;
              }
            } else {
              console.log("unauthorized");
              next_cursor = null;
            }
          } while (next_cursor != null);
        }
      }
    } else if (res) {
      res.send("success");
    }
  } catch (error) {
    errorHandler(error);
    if (res) {
      res.status(500).json(error);
    }
  }
};
