import { getMalwareBytesEndpointAssetsApi } from "../../../api/malwareBytes";
import { errorHandler } from "../../../utils/errorHandler";

import malwareBytesEndpointAssetsModel from "./endpointAssets.model";

const updateOrCreate = async (item, company_id, account_id, machine_id, id) => {
  try {
    await malwareBytesEndpointAssetsModel.updateOne(
      { id, company_id },
      { company_id, account_id, machine_id, ...item },
      {
        upsert: true,
      }
    );
    return true;
  } catch (err) {
    errorHandler(err);
    return false;
  }
};
export const fetchAndSaveEndpointAssetsData = (
  baseURL,
  token,
  account_id,
  company_id,
  machine_id,
  id
) =>
  new Promise((resolve, reject) => {
    getMalwareBytesEndpointAssetsApi(baseURL, token, account_id, machine_id)
      .catch((error) => resolve(error))
      .then(async (response) => {
        if (response && response.software_installed.length > 0) {
          try {
            await updateOrCreate(
              response,
              company_id,
              account_id,
              machine_id,
              id
            );
            resolve(response);
          } catch (err) {
            resolve(err);
          }
        } else {
          resolve("No data");
        }
      });
  });
