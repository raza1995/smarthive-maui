import { integrationsNames } from "../../../utils/constants";
import { getMalwareBytesQuarantineApi } from "../../../api/malwareBytes";
import { getMalwareBytesAccessToken } from "../../services/MalwareBytes/malwareByteServices";
import { getAllCompaniesHaveIntegration } from "../../../Mysql/Companies/company.service";
import malwareBytesQuarantinesModel from "./quarantines.model";
import { errorHandler } from "../../../utils/errorHandler";
import { CliProgressBar } from "../../../utils/cliProgressBar";

const updateOrCreate = async (items, company_id) => {
  try {
    let i = 0;
    for await (const item of items) {
      await malwareBytesQuarantinesModel.updateOne(
        { id: item.id, company_id },
        { company_id, ...item },
        {
          upsert: true,
        }
      );
      CliProgressBar(
        `Malwarebytes detections for company Id ${company_id}`,
        i,
        items.length
      );
      i++;
    }

    console.log("Number of items ", items.length);
    return true;
  } catch (err) {
    errorHandler(err);
    return false;
  }
};
const fetchAndSaveQuarantineData = (
  baseURL,
  token,
  account_id,
  company_id,
  next_cursor
) =>
  new Promise((resolve) => {
    getMalwareBytesQuarantineApi(baseURL, token, account_id, next_cursor)
      .catch((error) => resolve(error))
      .then(async (response) => {
        if (response?.data?.quarantined_threats?.length > 0) {
          try {
            await updateOrCreate(
              response?.data?.quarantined_threats,
              company_id
            );
            resolve(response.data);
          } catch (err) {
            resolve(err);
          }
        } else {
          resolve(response?.data);
        }
      });
  });

export const getMalwareBytesQuarantineOfCompany = async (company) => {
  try {
    const malwareByteIntegration = company?.integrations?.integration_values;
    const baseURL = company.integrations?.integrations_base_url?.base_url;
    if (malwareByteIntegration?.client_secret) {
      const client_secret = malwareByteIntegration?.client_secret;
      const client_id = malwareByteIntegration?.client_id;
      const account_ids = malwareByteIntegration?.account_ids;
      const AccessData = await getMalwareBytesAccessToken(
        client_id,
        client_secret,
        baseURL
      );
      if (AccessData.status === 200) {
        const oldQuarantine = await malwareBytesQuarantinesModel
          .find({ company_id: company.id })
          .sort({ updatedAt: -1 })
          .limit(2);
        const lastUpdatedAtDate = oldQuarantine?.[0]?.updatedAt;
        console.log("lastUpdatedAtDate", lastUpdatedAtDate);
        for await (const account_id of account_ids) {
          let next_cursor = null;
          do {
            const resp = await fetchAndSaveQuarantineData(
              baseURL,
              AccessData.data.access_token,
              account_id,
              company.id,
              next_cursor
            );
            console.log("total_count", resp?.total_count);
            if (resp?.next_cursor) {
              next_cursor = resp?.next_cursor;
            } else {
              next_cursor = null;
            }
          } while (next_cursor != null);
        }
        if (oldQuarantine.length > 0) {
          const deleteQuarantine =
            await malwareBytesQuarantinesModel.deleteMany({
              company_id: company.id,
              updatedAt: { $lte: lastUpdatedAtDate },
            });
          console.log(
            "Quarantine delete from mongoDB",
            deleteQuarantine.deletedCount
          );
        }
      } else {
        console.log("unauthorized");
      }
    }
  } catch (error) {
    errorHandler(error);
  }
};

export const getMalwareBytesQuarantine = async (req, res) => {
  try {
    const Companies = await getAllCompaniesHaveIntegration(
      integrationsNames.MALWAREBYTES
    );
    if (Companies.length > 0) {
      if (res) {
        res.send("Malware quarantine data start fetching successfully");
      }
      for await (const company of Companies) {
        await getMalwareBytesQuarantineOfCompany(company);
      }
    } else if (res) {
      res.send("success");
    }
  } catch (error) {
    errorHandler(error);
    if (res) {
      res.status(500).json(error);
    }
  }
};
