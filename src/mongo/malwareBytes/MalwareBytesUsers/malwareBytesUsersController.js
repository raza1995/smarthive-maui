import axios from "axios";
import {
  integrationsNames,
  malwareByteApiUrls,
} from "../../../utils/constants";
import malwareBytesUserModel from "./malwareByteUser.model";
import { getMalwareBytesAccessToken } from "../../services/MalwareBytes/malwareByteServices";
import { getAllCompaniesHaveIntegration } from "../../../Mysql/Companies/company.service";
import { errorHandler } from "../../../utils/errorHandler";

const updateOrCreate = async (items, company_id) => {
  try {
    console.log("Number of items ", items.length);
    for await (const item of items) {
      await malwareBytesUserModel.updateOne(
        { id: item.id, company_id },
        { company_id, ...item },
        {
          upsert: true,
        }
      );
    }
    console.log("done...");
    return true;
  } catch (err) {
    errorHandler(err);
    return false;
  }
};
const fetchAll = (baseURL, token, account_id, company_id) =>
  new Promise((resolve) => {
    axios
      .get(`${baseURL}/${malwareByteApiUrls.users}`, {
        headers: {
          authorization: `Bearer ${token}`,
        },
      })
      .catch((error) => resolve(error))
      .then((response) => {
        if (response?.data?.users?.length > 0) {
          if (updateOrCreate(response?.data?.users, company_id)) {
            resolve(response.data);
          } else {
            resolve("Error occured");
          }
          resolve(response.data);
        } else {
          resolve("No data");
        }
      });
  });

export const getMalwareBytesUsers = async (req, res) => {
  try {
    let pageUrl = null;
    const Companies = await getAllCompaniesHaveIntegration(
      integrationsNames.MALWAREBYTES
    );
    if (Companies) {
      for await (const company of Companies) {
        const malwareByteIntegration = company.integrations.integration_values;
        const baseURL = company.integrations?.integrations_base_url?.base_url;
        if (malwareByteIntegration?.client_secret) {
          do {
            const client_secret = malwareByteIntegration?.client_secret;
            const client_id = malwareByteIntegration?.client_id;
            const account_id = malwareByteIntegration?.account_id;
            const info = await getMalwareBytesAccessToken(
              client_id,
              client_secret,
              baseURL
            );
            console.log(info);
            if (info.status === 200) {
              const resp = await fetchAll(
                baseURL,
                info.data.access_token,
                account_id,
                company.id
              );
              // console.log(resp);
              if (resp?.next_cursor) {
                pageUrl = info.next_cursor;
              } else {
                pageUrl = null;
              }
            } else {
              console.log("unauthorized");
            }
          } while (pageUrl != null);
        }
      }
    }
    res.send("success");
  } catch (error) {
    errorHandler(error);
    res.status(500).json(error);
  }
};
