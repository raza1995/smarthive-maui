import axios from "axios";
import { getMalwareBytesAccessToken } from "../../services/MalwareBytes/malwareByteServices";
import malwareBytesEndpointAgentInfoModel from "./endpointAgentinfo.model";
import { integrationsNames } from "../../../utils/constants";
import { getAllCompaniesHaveIntegration } from "../../../Mysql/Companies/company.service";
import { CliProgressBar } from "../../../utils/cliProgressBar";
import malwareBytesEndpointModel from "../Endpoints/endpoints.model";
import { errorHandler } from "../../../utils/errorHandler";

const updateOrCreate = async (item, asset_id, company_id) => {
  try {
    await malwareBytesEndpointAgentInfoModel.updateOne(
      { asset_id, company_id },
      { ...item, company_id },
      { upsert: true }
    );
    return true;
  } catch (err) {
    errorHandler(err);
    return false;
  }
};

const fetchData = async (baseURL, account_id, asset_id, token, company_id) =>
  new Promise((resolve) => {
    const url = `${baseURL}/v1/accounts/${account_id}/endpoints/${asset_id}/agent_info`;
    axios
      .get(url, {
        headers: {
          authorization: `Bearer ${token}`,
        },
      })
      .catch((error) => {
        errorHandler(error);
        resolve(error);
      })
      .then((response) => {
        if (response) {
          // console.log(response?.data);
          if (updateOrCreate(response?.data, asset_id, company_id)) {
            resolve(response.data);
          } else {
            resolve("Error occured");
          }
          resolve(response.data);
        } else {
          resolve("No data");
        }
      });
  });

export const getEndpointAgentInfoOfCompany = async (company) => {
  try {
    if (company.integrations) {
      const malwareByteIntegration = company.integrations.integration_values;
      const baseURL = company.integrations?.integrations_base_url?.base_url;
      if (malwareByteIntegration?.client_secret) {
        const client_secret = malwareByteIntegration?.client_secret;
        const client_id = malwareByteIntegration?.client_id;
        const integrationCategoryType =
          company?.integrations.integration_category_type;
        const info = await getMalwareBytesAccessToken(
          client_id,
          client_secret,
          baseURL
        );
        // console.log("info", info);

        if (info?.status === 200) {
          const malwareDevice = await malwareBytesEndpointModel
            .find({
              company_id: company.id,
              integration_category_type: integrationCategoryType,
            })
            .sort({ updatedAt: -1 });
          const oldData = await malwareBytesEndpointAgentInfoModel
            .find({
              company_id: company.id,
              integration_category_type: integrationCategoryType,
            })
            .sort({ updatedAt: -1 });
          const lastUpdatedAtDate = oldData?.[0]?.updatedAt;
          console.log("lastUpdatedAtDate", lastUpdatedAtDate, oldData.length);
          let i = 0;
          const startTime = new Date();
          for await (const asset of malwareDevice) {
            const link = asset.link.split("/");
            const asset_id = link[link.length - 1];
            await fetchData(
              baseURL,
              asset.agent.account_id,
              asset_id,
              info.data.access_token,
              company.id
            );
            CliProgressBar(
              `Malwarebytes agentInfo for company Id ${company.id}`,
              i,
              malwareDevice.length,
              startTime
            );
            i++;
          }
          if (oldData.length > 0) {
            const deleteEndpointAgentInfo =
              await malwareBytesEndpointAgentInfoModel.deleteMany({
                company_id: company.id,
                integration_category_type: integrationCategoryType,
                updatedAt: { $lte: lastUpdatedAtDate },
              });
            console.log(
              "delete assets info deleted from mongoDB",
              deleteEndpointAgentInfo.deletedCount
            );
          }
        } else {
          console.log("unauthorized");
        }
      }
    }
  } catch (error) {
    errorHandler(error);
  }
};
export const getEndpointAgentInfo = async (req, res) => {
  try {
    // const companies = await companyService.getCompanies({
    //   tenant: { $ne: null },
    // });
    const Companies = await getAllCompaniesHaveIntegration(
      integrationsNames.MALWAREBYTES
    );
    if (Companies.length > 0) {
      if (res) {
        res.send("Malware agent info data start successfully");
      }
      for await (const company of Companies) {
        await getEndpointAgentInfoOfCompany(company);
      }
    }
  } catch (error) {
    errorHandler(error);
    if (res) {
      res.status(500).json(error);
    }
  }

  // let countRecords = await deviceModel.countDocuments({});
  // console.log(`Total Records Saved ${countRecords}`);
};
